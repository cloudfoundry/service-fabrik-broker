// Code generated by MockGen. DO NOT EDIT.
// Source: resources.go

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	reflect "reflect"

	v1alpha1 "github.com/cloudfoundry-incubator/service-fabrik-broker/interoperator/api/osb/v1alpha1"
	properties "github.com/cloudfoundry-incubator/service-fabrik-broker/interoperator/internal/properties"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockResourceManager is a mock of ResourceManager interface.
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager.
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance.
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// ComputeExpectedResources mocks base method.
func (m *MockResourceManager) ComputeExpectedResources(client client.Client, instanceID, bindingID, serviceID, planID, action, namespace string) ([]*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeExpectedResources", client, instanceID, bindingID, serviceID, planID, action, namespace)
	ret0, _ := ret[0].([]*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeExpectedResources indicates an expected call of ComputeExpectedResources.
func (mr *MockResourceManagerMockRecorder) ComputeExpectedResources(client, instanceID, bindingID, serviceID, planID, action, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeExpectedResources", reflect.TypeOf((*MockResourceManager)(nil).ComputeExpectedResources), client, instanceID, bindingID, serviceID, planID, action, namespace)
}

// ComputeStatus mocks base method.
func (m *MockResourceManager) ComputeStatus(client client.Client, instanceID, bindingID, serviceID, planID, action, namespace string) (*properties.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeStatus", client, instanceID, bindingID, serviceID, planID, action, namespace)
	ret0, _ := ret[0].(*properties.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeStatus indicates an expected call of ComputeStatus.
func (mr *MockResourceManagerMockRecorder) ComputeStatus(client, instanceID, bindingID, serviceID, planID, action, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeStatus", reflect.TypeOf((*MockResourceManager)(nil).ComputeStatus), client, instanceID, bindingID, serviceID, planID, action, namespace)
}

// DeleteSubResources mocks base method.
func (m *MockResourceManager) DeleteSubResources(client client.Client, subResources []v1alpha1.Source) ([]v1alpha1.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubResources", client, subResources)
	ret0, _ := ret[0].([]v1alpha1.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubResources indicates an expected call of DeleteSubResources.
func (mr *MockResourceManagerMockRecorder) DeleteSubResources(client, subResources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubResources", reflect.TypeOf((*MockResourceManager)(nil).DeleteSubResources), client, subResources)
}

// ReconcileResources mocks base method.
func (m *MockResourceManager) ReconcileResources(client client.Client, expectedResources []*unstructured.Unstructured, lastResources []v1alpha1.Source, force bool) ([]v1alpha1.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileResources", client, expectedResources, lastResources, force)
	ret0, _ := ret[0].([]v1alpha1.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileResources indicates an expected call of ReconcileResources.
func (mr *MockResourceManagerMockRecorder) ReconcileResources(client, expectedResources, lastResources, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileResources", reflect.TypeOf((*MockResourceManager)(nil).ReconcileResources), client, expectedResources, lastResources, force)
}

// SetOwnerReference mocks base method.
func (m *MockResourceManager) SetOwnerReference(owner v1.Object, resources []*unstructured.Unstructured, scheme *runtime.Scheme) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnerReference", owner, resources, scheme)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnerReference indicates an expected call of SetOwnerReference.
func (mr *MockResourceManagerMockRecorder) SetOwnerReference(owner, resources, scheme interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnerReference", reflect.TypeOf((*MockResourceManager)(nil).SetOwnerReference), owner, resources, scheme)
}
